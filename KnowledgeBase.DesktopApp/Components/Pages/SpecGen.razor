@page "/specgen"
@using System.ComponentModel.DataAnnotations
@using AntDesign.TableModels
@using FeatGen.CodingAgent
@using FeatGen.DesktopApp
@using FeatGen.DesktopApp.Components
@using FeatGen.DesktopApp.Components.Components
@using FeatGen.DesktopApp.PreparedCode
@using FeatGen.DesktopApp.StateContainers
@using FeatGen.Models
@using FeatGen.Models.ReportGenerator
@inject CodeGenStateContainer codeGenStateContainer

<GridRow>
    <Flex Direction="FlexDirection.Vertical" Gap="FlexGap.Middle" Style="width:100%">
        <Flex Direction="FlexDirection.Horizontal" Gap="FlexGap.Middle">
            <AntDesign.Input Placeholder="Software Name"
            Width="300px"
            @bind-Value="@newSoftwareName">
            </AntDesign.Input>

            <Button Type="ButtonType.Primary"
            OnClick="@GenerateNewSpec">
                Generate New Spec
            </Button>
        </Flex>
        @if (errorMessage != "")
        {
            <Alert Message="@errorMessage" Type="AlertType.Error" />
        }

        @if (isLoading == true)
        { 
            <GridRow> 
                <Spin> 
                </Spin> 
            </GridRow> 
        }
        else
        {
            <Table TItem="SpecGenReport" PageSize="5"
            Total="reports.Count" DataSource="reports">
                <ColumnDefinitions Context="row">
                    <GenerateColumns Definitions="@((n,c) => { c.Filterable = true; c.Sortable = true; })" />
                </ColumnDefinitions>
            </Table>
        }
    </Flex>
</GridRow>

@code {

    private bool isLoading { get; set; }
    private string errorMessage { get; set; }
    private bool fileWroteSuccess { get; set; }
    private string newSoftwareName { get; set; }

    private List<SpecGenReport> reports = new List<SpecGenReport>();

    protected override async Task OnInitializedAsync()
    {
        errorMessage = "";

        codeGenStateContainer.OnChange += StateHasChanged;

        isLoading = true;
        var data = await ApiCaller.GetReportsAsync();
        reports = data.Select(p =>
        {
            return new SpecGenReport
                {
                    ReportId = p.Id.ToString(),
                    ReportName = p.Specification.Title,
                    CreatedAt = p.CreatedAt == null ? "" : (p.CreatedAt ?? new DateTime()).ToString("yyyy-MM-dd HH:mm:ss")
                };
        }).ToList();

        isLoading = false;
    }

    public void Dispose()
    {
        codeGenStateContainer.OnChange -= StateHasChanged;
    }

    public async Task GenerateNewSpec()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            await ApiCaller.GenerateNewSpecificationAsync(newSoftwareName);

            var data = await ApiCaller.GetReportsAsync();
            reports = data.Select(p =>
            {
                return new SpecGenReport
                    {
                        ReportId = p.Id.ToString(),
                        ReportName = p.Specification.Title,
                        CreatedAt = p.CreatedAt == null ? "" : (p.CreatedAt ?? new DateTime()).ToString("yyyy-MM-dd HH:mm:ss")
                    };
            }).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }



    }

    protected class SpecGenReport
    {
        public string ReportId { get; set; }
        public string ReportName { get; set; }
        public string CreatedAt { get; set; }
    }
}
