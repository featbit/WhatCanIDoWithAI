
@inject CodeGenStateContainer codeGenStateContainer


<GridRow>
    <Flex Direction="FlexDirection.Vertical" Gap="FlexGap.Middle" Style="width:100%">

        @if (errorMessage != "")
        {
            <Alert Message="@errorMessage" Type="AlertType.Error" />
        }

        <GridRow>
            <Button Type="ButtonType.Primary"
            OnClick="@GenerateCodeAsync">
                Generate Theme
            </Button>
        </GridRow>

        @if(isLoading == true) 
        { 
            <GridRow> 
                <Spin> 
                </Spin> 
            </GridRow> 
        } 
        else 
        {
            <Flex Direction="FlexDirection.Vertical" Gap="FlexGap.Small" Style="width:100%">
                <h3>>Dark Mode: @codeGenStateContainer.ThemeCode.DarkMode</h3>
                <h3>>Font Family: @codeGenStateContainer.ThemeCode.FontFamily</h3>
                <h3>>Primary Color: @codeGenStateContainer.ThemeCode.PrimaryColor</h3>
                <h3>>Secondary Color: @codeGenStateContainer.ThemeCode.SecondaryColor</h3>
                <h3>>Body Bg Color: @codeGenStateContainer.ThemeCode.BodyBgColor</h3>
                <h3>>Body Bg Color Drak Mode: @codeGenStateContainer.ThemeCode.BodyBgColorDrakMode</h3>
                <h3>>Text Color: @codeGenStateContainer.ThemeCode.TextColor</h3>
                <h3>>Text Color Dark Mode: @codeGenStateContainer.ThemeCode.TextColorDarkMode</h3>

                <Button Type="ButtonType.Primary" 
                OnClick="@WriteCodeToFile"> 
                    Write Code to File 
                </Button> 
                @if (fileWroteSuccess == true)
                {
                    <Alert Message="Code Updated to File Successfully" Type="AlertType.Success" />
                }
            </Flex> 
        }
    </Flex>
</GridRow>

@code {

    private bool isLoading { get; set; }
    private string errorMessage { get; set; }
    private bool fileWroteSuccess { get; set; }

    protected override void OnInitialized()
    {
        errorMessage = "";
        codeGenStateContainer.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        codeGenStateContainer.OnChange -= StateHasChanged;
    }

    public async Task GenerateCodeAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            await ApiCaller.GenerateThemeCodeAsync(
                codeGenStateContainer.ReportId);

            var reportCode = (await ApiCaller.GetReportCodeByReportId(codeGenStateContainer.ReportId));
            codeGenStateContainer.ThemeCode = reportCode.Theme;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    public void WriteCodeToFile()
    {
        try
        {
            fileWroteSuccess = false;
            isLoading = true;

            string fileContent = IndexHtml.GetHtmlContent(codeGenStateContainer.ThemeCode);
            string path = codeGenStateContainer.CodeRootPath + "/index.html";
            FileAgent.RewriteFileContent(
                path,
                fileContent);

            fileWroteSuccess = true;
        }
        catch(Exception exp)
        {
            errorMessage = exp.Message;
        }
        finally
        {
            isLoading = false;
        }
        
    }
}
